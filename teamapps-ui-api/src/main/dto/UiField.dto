/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2021 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
enum UiFieldEditingMode {
	EDITABLE,
	EDITABLE_IF_FOCUSED, // UiGridForm and UiCompositeField only!!
	DISABLED,
	READONLY
}

abstract class UiField extends UiComponent {
	UiFieldEditingMode editingMode = UiFieldEditingMode.EDITABLE;
	Object value;
	List<UiFieldMessage> fieldMessages;

	event valueChanged(Object value);

	command setEditingMode(UiFieldEditingMode editingMode);
	command setValue(Object value);
    command focus();
	command setFieldMessages(List<UiFieldMessage> fieldMessages);
}

interface UiTextInputHandlingField {
	event textInput(String enteredString);
	event specialKeyPressed(UiSpecialKey key); // CAUTION: unfiltered at the moment. E.g. ComboBox selection via ENTER or TextField reset via ESCAPE
}

enum UiSpecialKey {
	ENTER, ESCAPE
}

class UiComponentField extends UiField {
	UiComponent* component;
	int height; // 0 = the height will be determined by the component's content and context
	boolean bordered;

	command setComponent(UiComponent* component);
	command setHeight(int height);
	command setBordered(boolean bordered);
}

class UiTextField extends UiField implements UiTextInputHandlingField {
	int maxCharacters; //if > 0, do not allow to enter more than this number of characters
	boolean showClearButton;
	String emptyText;
	boolean autofill = false; // browser feature

	command setMaxCharacters(int maxCharacters);
	command setShowClearButton(boolean showClearButton);
	command setEmptyText(String emptyText);
}

class UiPasswordField extends UiTextField {
	boolean sendValueAsMd5;
	String salt; // if sendValueAsMd5 == true and salt != null, then submit md5(salt + md5(fieldValue))
	boolean autofill = false;

	command setSendValueAsMd5(boolean sendValueAsMd5);
	command setSalt(String salt);
}

class UiMultiLineTextField extends UiTextField {
	boolean adjustHeightToContent = false;
	
	command append(String s, boolean scrollToBottom);
}

enum UiToolbarVisibilityMode {
	HIDDEN, VISIBLE, VISIBLE_IF_FOCUSED
}

class UiRichTextEditor extends UiField implements UiTextInputHandlingField {
    String locale;
	String uploadUrl = "/upload";
	long maxImageFileSizeInBytes = 5000000;
	UiToolbarVisibilityMode toolbarVisibilityMode = UiToolbarVisibilityMode.VISIBLE_IF_FOCUSED;
	int minHeight = 150;
	int maxHeight = 150;

	event imageUploadTooLarge(String fileName, String mimeType, long sizeInBytes);
	event imageUploadStarted(String fileName, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event imageUploadSuccessful(String fileUuid, String name, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event imageUploadFailed(String name, String mimeType, long sizeInBytes, int incompleteUploadsCount);

	command setMinHeight(int minHeight);
	command setMaxHeight(int maxHeight);
	command setUploadUrl(String uploadUrl);
	command setMaxImageFileSizeInBytes(long maxImageFileSizeInBytes);
	command setUploadedImageUrl(String fileUuid, String url);
	command setToolbarVisibilityMode(UiToolbarVisibilityMode toolbarVisibilityMode);
}

class UiDisplayField extends UiField {
	boolean showBorder; //if true, show a border like for text fields
	boolean showHtml; //if true, treat the value as valid HTML
	boolean removeStyleTags = true;

	command setShowBorder(boolean showBorder);
	command setShowHtml(boolean showHtml);
	command setRemoveStyleTags(boolean removeStyleTags);
}

class UiLabel extends UiField {
	required String caption; // this is only displayed if value == null
	String icon;
	UiComponent* targetComponent; // if != null, this is the field that gets focused when this label gets clicked. This label also appears/disappears synchronously to its target field

	event clicked();

	command setCaption(String caption);
	command setIcon(String icon);
	command setTargetComponent(UiField* targetField);
}

// StringValue
class UiImageField extends UiField {
	String width; // css
	String height; // css
    UiBorder border;
    UiShadow shadow;
	UiImageSizing imageSizing = UiImageSizing.CONTAIN;
	String backgroundColor = "transparent";

	command update(UiImageField config);
}

class UiNumberField extends UiField implements UiTextInputHandlingField {
  	String locale;
	int precision = -1; //if == 0 then don't show fractions, if < 0 then show the available precision of the current number
	String emptyText;
	boolean showClearButton;
	double minValue = Double.MIN_VALUE;
    double maxValue = Double.MAX_VALUE;
    UiNumberFieldSliderMode sliderMode = UiNumberFieldSliderMode.DISABLED;
    double sliderStep = 1;
    boolean commitOnSliderChange = true;

    command setMinValue(double min);
    command setMaxValue(double max);
    command setSliderMode(UiNumberFieldSliderMode sliderMode);
    command setSliderStep(double step);
    command setCommitOnSliderChange(boolean commitOnSliderChange);
	command setPrecision(int displayPrecision);
	command setEmptyText(String emptyText);
	command setShowClearButton(boolean showClearButton);
	command setLocale(String locale);
}

enum UiNumberFieldSliderMode {
	DISABLED, VISIBLE, VISIBLE_IF_FOCUSED, SLIDER_ONLY
}

// the read-only view (e.g. in a table) shows the currency indicator as part of the value text (e.g. "23.00 EUR" or "23.50 €")
//the value is always a long in cents for accuracy
class UiCurrencyField extends UiField implements UiTextInputHandlingField {
	String locale;
	String defaultCurrencyCode; // the selected or default currency code (ISO 4217 - e.g. "USD", "EUR"). Nullable. However, the user has to select a currency.
	List<String> currencyCodeList; //list of ISO 4217 currencies - e.g. "USD", "EUR", etc. to be displayed as dropdown selection if available
	int precision = 2;
	boolean showCurrencyBeforeAmount; // If true, the currency indicator is on the left of the amount. If false, it is on the right of the amount.
	boolean showCurrencySymbol; // If false, show "EUR", "USD", etc. as selected value of dropdown button. If true, show "$" for "USD", "€" for "EUR". The dopdown list shows always both ISO code and currency symbol (e.g. "$ (USD)" or "€ (EUR)"). Use "¤" as generic symbol (as defined in ISO standard).
	boolean alphaKeysQueryForCurrency = true; //if true a hit on e will query all currencies starting with e; autocomplete (TODO) should be activated; field will act like a combobox -> if the value is 10.50 and typing u it should display the sugestion list containing 10.50 USD or 10.50 $ (USD)

	command setDefaultCurrencyCode(String defaultCurrencyCode);
	command setCurrencyCodeList(List<String> currencyCodeList);
	command setShowCurrencyBeforeAmount(boolean showCurrencyBeforeAmount);
	command setShowCurrencySymbol(boolean showCurrencySymbol);
	command setLocale(String locale);
	command setPrecision(int precision);
}

/**
TODO:
FORM
  uploaded files section:
	- custom items (UiTextCell) with remove button ("x")
	- floating or list style
	- on click (server side handling)
		a) download file
		b) render dropdown underneath the file // how??
  files to be uploaded section:
	- same as currently implemented
  add files button:
	- same as currently implemented
	- set color, icon, text, height
	- hide when max number of files reached
LIST
  uploaded files section:
	- custom items (UiTextCell)
	- always floating
	- on click (server side handling)
		a) download file
		b) render dropdown underneath the file
TABLE (editable mode)
  uploaded files section:
	- same as list
	- on click open UiWindow (non-modal?) with a form containing only the UiFileField.
  DnD:
	- only if not performance breaking --> opens window
 */
class UiFileField extends UiField {
	required UiTemplate itemTemplate; // template for rendering the uploaded files section. All data for this section comes from the server (field value)
	long maxBytesPerFile = 5000000;
	String uploadUrl = "/upload"; // May point anywhere.
	String fileTooLargeMessage = "File too large!";
	String uploadErrorMessage = "Error while transmitting file...";
	UiFileFieldDisplayType displayType = UiFileFieldDisplayType.LIST;
	int maxFiles; // the max number of files to be uploaded in total for this field
	required UiTemplate uploadButtonTemplate;
	required Object uploadButtonData;
	boolean showEntriesAsButtonsOnHover = false;

    event uploadTooLarge(String fileItemUuid, String fileName, String mimeType, long sizeInBytes);
	event uploadStarted(String fileItemUuid, String fileName, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event uploadCanceled(String fileItemUuid, String fileName, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event uploadFailed(String fileItemUuid, String fileName, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event uploadSuccessful(String fileItemUuid, String uploadedFileUuid, String fileName, String mimeType, long sizeInBytes, int incompleteUploadsCount);
	event fileItemClicked(int clientId);
	event fileItemRemoveButtonClicked(int clientId);

	command replaceFileItem(String fileItemUuid, UiIdentifiableClientRecord data);
	command setItemTemplate(UiTemplate itemTemplate);
	command setMaxBytesPerFile(long maxBytesPerFile);
	command setUploadUrl(String uploadUrl);
	command setDisplayType (UiFileFieldDisplayType displayType);
	command setMaxFiles(int maxFiles);
	command setUploadButtonTemplate(UiTemplate uploadButtonTemplate);
    command setUploadButtonData(Object uploadButtonData);
    command setShowEntriesAsButtonsOnHover(boolean showEntriesAsButtonsOnHover);
}

enum UiFileFieldDisplayType {
	LIST, FLOATING
}

class UiSimpleFileField extends UiField {
	String browseButtonIcon;
	String browseButtonCaption = "Select";
	String uploadUrl = "/upload"; // May point anywhere.
	long maxBytesPerFile = 5000000;
	String fileTooLargeMessage = "File too large!";
	String uploadErrorMessage = "Error while transmitting file...";
	int maxFiles = 0; // the max number of files to be uploaded in total for this field
	UiFileFieldDisplayType displayMode = UiFileFieldDisplayType.LIST;

	List<UiFileItem> fileItems;

	event uploadInitiatedByUser(String uuid, String fileName, String mimeType, long sizeInBytes);
    event uploadTooLarge(String fileItemUuid);
	event uploadStarted(String fileItemUuid);
	event uploadCanceled(String fileItemUuid);
	event uploadFailed(String fileItemUuid);
	event uploadSuccessful(String fileItemUuid, String uploadedFileUuid);
	event fileItemClicked(String fileItemUuid);
	event fileItemRemoved(String fileItemUuid);

	command addFileItem(UiFileItem item);
	command updateFileItem(UiFileItem item);
	command removeFileItem(String itemUuid);

	command setBrowseButtonIcon(String browseButtonIcon);
	command setBrowseButtonCaption(String browseButtonCaption);
	command setUploadUrl(String uploadUrl);
	command setMaxBytesPerFile(long maxBytesPerFile);
	command setFileTooLargeMessage(String fileTooLargeMessage);
	command setUploadErrorMessage(String uploadErrorMessage);
	command setMaxFiles(int maxFiles);
	command setDisplayMode(UiFileFieldDisplayType displayType);
}

class UiPictureChooser extends UiField {
	String uploadUrl = "/upload"; // May point anywhere.
	long maxFileSize = 5000000;
	String fileTooLargeMessage = "File too large!";
	String uploadErrorMessage = "Error while transmitting file...";

	String browseButtonIcon;
    String deleteButtonIcon;

    int imageDisplayWidth;
    int imageDisplayHeight;

	UiFileItem fileItem;

	event uploadInitiatedByUser(String fileName, String mimeType, long sizeInBytes);
    event uploadTooLarge(String fileName, String mimeType, long sizeInBytes);
	event uploadStarted(String fileName, String mimeType, long sizeInBytes);
	event uploadCanceled(String fileName, String mimeType, long sizeInBytes);
	event uploadFailed(String fileName, String mimeType, long sizeInBytes);
	event uploadSuccessful(String fileName, String mimeType, long sizeInBytes, String uploadedFileUuid);

	command setBrowseButtonIcon(String browseButtonIcon);
	command setUploadUrl(String uploadUrl);
	command setMaxFileSize(long maxFileSize);
	command setFileTooLargeMessage(String fileTooLargeMessage);
	command setUploadErrorMessage(String uploadErrorMessage);
}

@TypeScriptFactory
class UiFileItem {
	String uuid;
	String icon;
	String thumbnail;
	String fileName;
	String description;
	long size;
	String linkUrl; // If not null, the click triggers a new tab/window to open with the url. If null, nothing happens on click, except the fileItemClicked event being triggered.
}

class UiCheckBox extends UiField {
	String caption; // displayed on the right side of the checkbox
	String backgroundColor = "rgb(255, 255, 255)";
	String checkColor = "rgb(70, 70, 70)";
	String borderColor = "rgb(123, 123, 123)";

	command setCaption(String caption);
	command setBackgroundColor(String backgroundColor);
	command setCheckColor(String checkColor);
	command setBorderColor(String borderColor);
}

abstract class AbstractUiTimeField extends UiField implements UiTextInputHandlingField {
    boolean showDropDownButton = true;
    boolean showClearButton;
    String locale;
    UiDateTimeFormatDescriptor timeFormat = null; // if null, UiConfiguration.timeFormat applies     

    command setShowDropDownButton(boolean showDropDownButton);
    command setShowClearButton(boolean showClearButton);
    command setLocaleAndTimeFormat(String locale, UiDateTimeFormatDescriptor timeFormat);
}

class UiLocalTimeField extends AbstractUiTimeField {
}

abstract class AbstractUiDateField extends UiField implements UiTextInputHandlingField {
    boolean showDropDownButton = true;
	boolean showClearButton;
	boolean favorPastDates = false;
	String locale;
	UiDateTimeFormatDescriptor dateFormat = null; // if null, UiConfiguration.dateFormat applies

	command setShowDropDownButton(boolean showDropDownButton);
	command setShowClearButton(boolean showClearButton);
	command setFavorPastDates(boolean favorPastDates);
	command setLocaleAndDateFormat(String locale, UiDateTimeFormatDescriptor dateFormat);
}

class UiLocalDateField extends AbstractUiDateField {
}

abstract class AbstractUiDateTimeField extends UiField {
	boolean showDropDownButton = true;
	boolean favorPastDates = false; // TODO!!!
	String locale;
	UiDateTimeFormatDescriptor dateFormat = null; // if null, UiConfiguration.dateFormat applies
	UiDateTimeFormatDescriptor timeFormat = null; // if null, UiConfiguration.timeFormat applies

	command setShowDropDownButton(boolean showDropDownButton);
	command setFavorPastDates(boolean favorPastDates);
	command setLocaleAndFormats(String locale, UiDateTimeFormatDescriptor dateFormat, UiDateTimeFormatDescriptor timeFormat);
}

class UiLocalDateTimeField extends AbstractUiDateTimeField {
}

class UiInstantDateTimeField extends AbstractUiDateTimeField {
	String timeZoneId = null; // if null, UiConfiguration.timeZoneId applies

	command setTimeZoneId(String timeZoneId);
}

class UiButton extends UiField {
	required UiTemplate template;
	required Object templateRecord;

	int minDropDownWidth = 450;
	int minDropDownHeight = 200;
	boolean openDropDownIfNotSet = false;
	UiComponent* dropDownComponent;
	String onClickJavaScript;

	command setTemplate(UiTemplate template, Object templateRecord);
	command setTemplateRecord(Object templateRecord);
	command setDropDownSize(int minDropDownWidth, int minDropDownHeight);
	command setOpenDropDownIfNotSet(boolean openDropDownIfNotSet);
	command setDropDownComponent(UiComponent* dropDownComponent);
	command setOnClickJavaScript(String onClickJavaScript);

	event clicked();
	event dropDownOpened();
}

class UiLinkButton extends UiComponent {
	String text;
	String url = null; // null = still render as link but do not open a page
	UiLinkTarget target = UiLinkTarget.BLANK;
	String onClickJavaScript;

	command update(UiLinkButton config);

	event clicked();
}

enum UiLinkTarget {
	SELF, BLANK, PARENT, TOP;
}

/**
Sub-fields' are evaluated directly against the main Object of the Form/Table.
*/
class UiCompositeField extends UiField { // TODO #ux
	required List<UiColumnDefinition> columnDefinitions;
    required List<Integer> rowHeights;
    required List<UiCompositeSubField> subFields;
    int horizontalCellSpacing = 2;
    int verticalCellSpacing = 2;
    int padding = 0;
    boolean drawFieldBorders;
}

class UiColumnDefinition {
	required float width; // values <1 are treated relative widths. Values >= 1 are treated fixed/absolute widths in px.
	required int minWidth;
}

class UiCompositeSubField {
	required String propertyName;
	required int row;
	required int col;
	required UiField* field;
	int rowSpan = 1;
	int colSpan = 1;
	int tabIndex = 0; // tab-index within the UiCompositeField*. Lower values are first. Default is 0. <0: focusable but not reachable via tab; 0: focusable and reachable via tab, ordered by its position; >0: focusable, order defined by tabindex
	String visibilityPropertyName; // nullable; name of a boolean field in the record data which determines whether this subField is to be displayed. If multiple visible subfields are in the same position, the last one must be shown and the others are hidden AND a warning must be written to the console.
}

/**********************************************************************************************************************
*
*                                                    C O M B O B O X
*
***********************************************************************************************************************/


enum UiTextMatchingMode {
	PREFIX,
	PREFIX_WORD,
	CONTAINS,
	SIMILARITY
}

class UiComboBox extends UiField implements UiTextInputHandlingField {
	Dictionary<UiTemplate> templates;
	boolean showDropDownButton = true;
	boolean showDropDownAfterResultsArrive = false;
	boolean highlightFirstResultEntry = true;
	boolean showHighlighting; // TODO highlight any line of the template, but only corresponding to the textMatchingMode
	boolean autoComplete = true; // if true, by typing any letter, the first matching will be selected (keeping all not yet entered letters int the text box selected)
	int textHighlightingEntryLimit = 100;
	boolean allowAnyText;
	boolean showClearButton;
	boolean animate;
	boolean showExpanders = true;

	query lazyChildren(int parentId) returns List<UiComboBoxTreeRecord>;
	query retrieveDropdownEntries(String queryString) returns List<UiComboBoxTreeRecord>;

	command registerTemplate(String id, UiTemplate template);
	command replaceFreeTextEntry(String freeText, UiComboBoxTreeRecord newEntry);
}

class UiTagComboBox extends UiComboBox {
	int maxEntries; // if 0, then the list is unbounded
	enum {SINGLE_LINE, MULTI_LINE, SINGLE_TAG_PER_LINE} wrappingMode = WrappingMode.MULTI_LINE;
	boolean distinct = true; // if true, do not allow the same entry to be selected multiple times!
	boolean twoStepDeletion; // This will cause tags to not directly be deleted when pressing the backspace or delete key, but first marked for deletion.
}

//// the read-only view (e.g. in a table) shows the currency indicator as part of the value text (e.g. "23.00 EUR" or "23.50 €")
////the value is always a long in cents for accuracy
//class UiUnitBox extends UiComboBox {
//	List<Object> staticData; //list of ISO 4217 currencies - e.g. "USD", "EUR", etc. to be displayed as dropdown selection if available
//	int precision = 2;
//	boolean showUnitBeforeAmount; // If true, the currency indicator is on the left of the amount. If false, it is on the right of the amount.
//	boolean alphaKeysQueryForCurrency = true; //if true a hit on e will query all currencies starting with e; autocomplete (TODO) should be activated; field will act like a combobox -> if the value is 10.50 and typing u it should display the sugestion list containing 10.50 USD or 10.50 $ (USD)
//
//	command setDropDownData(List<Object> data);
//	command setShowUnitBeforeAmount(boolean showCurrencyBeforeAmount);
//}

class UiSlider extends UiField {
	double min = 0;
	double max = 100;
	double step = 1;
	int displayedDecimals = 0;
	String selectionColor = "rgb(51, 122, 183)";
	String tooltipPrefix;
	String tooltipPostfix;
	boolean humanReadableFileSize = false;

	command setMin(double min);
	command setMax(double max);
	command setStep(double step);
	command setDisplayedDecimals(int displayedDecimals);
	command setSelectionColor(String selectionColor);
	command setTooltipPrefix(String tooltipPrefi);
	command setTooltipPostfix(String tooltipPostfi);
	command setHumanReadableFileSize(boolean humanReadableFileSize);
}

class UiColorPicker extends UiField {
	String defaultColor = "rgb(0, 0, 0)";
	String saveButtonCaption = "Save";
    String clearButtonCaption = "Clear";
}

class UiTemplateField extends UiField {
	UiTemplate template;
	
	command update(UiTemplateField config);

	event clicked();
}
